module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	const rendererRule = exports.rendererRule = (tokens, idx, options) => {
	  return options.replace(tokens[idx].content);
	};

	const coreRuler = exports.coreRuler = (state, options) => {
	  for (let i = 0; i < state.tokens.length; i++) {
	    if (state.tokens[i].type !== 'inline') {
	      continue;
	    }
	    let tokens = state.tokens[i].children;
	    for (let j = tokens.length - 1; j >= 0; j--) {
	      let token = tokens[j];
	      if (token.type === 'text' && options.regex.test(token.content)) {
	        const newTokens = token.content.split(options.regex).map((item, index) => ({ type: index % 2 === 0 ? 'text' : options.name, content: item })).filter(item => item.content.length > 0).map(item => {
	          const newToken = new state.Token(item.type, '', 0);
	          newToken.content = item.content;
	          return newToken;
	        });
	        state.tokens[i].children = tokens = [...tokens.slice(0, j), ...newTokens, ...tokens.slice(j + 1)];
	      }
	    }
	  }
	};

	const regexPlugin = (md, options) => {
	  md.renderer.rules[options.name] = (tokens, idx) => {
	    return rendererRule(tokens, idx, options);
	  };

	  md.core.ruler.push(options.name, state => {
	    coreRuler(state, options);
	  });
	};

	exports.default = regexPlugin;

/***/ }
/******/ ]);